{"version":3,"sources":["ngx-smart-modal.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","ngxSmartModal","core","common","this","NgxSmartModalConfig","bodyClassOpen","prefixEvent","NgxSmartModalComponent","_renderer","_changeDetectorRef","componentFactoryResolver","_document","_platformId","closable","escapable","dismissable","identifier","customClass","visible","backdrop","force","hideDelay","autostart","target","ariaLabel","ariaLabelledBy","ariaDescribedBy","visibleChange","EventEmitter","onClose","onCloseFinished","onDismiss","onDismissFinished","onAnyCloseEvent","onAnyCloseEventFinished","onOpen","onOpenFinished","onEscape","onDataAdded","onDataRemoved","layerPosition","overlayVisible","openedClass","createFrom","prototype","ngOnInit","length","Error","_sendEvent","ngAfterViewInit","_this","contentComponent","factory_1","resolveComponentFactory","createDynamicContent","dynamicContentContainer","changes","subscribe","contentViewContainers","ngOnDestroy","open","top","close","dismiss","e","classList","contains","toggle","addCustomClass","className","removeCustomClass","replace","trim","isVisible","hasData","undefined","_data","setData","data","emit","markForCheck","console","log","content","EmbeddedViewRef","Object","assign","context","getData","removeData","addBodyClass","addClass","body","removeBodyClass","removeClass","detectChanges","targetPlacement","isBrowser","nsmDialog","nsmContent","nsmOverlay","targetElement","querySelector","targetElementRect","getBoundingClientRect","bodyRect","first","nativeElement","nsmContentRect","nsmDialogRect","marginLeft","parseInt","getComputedStyle","marginTop","offsetTop","height","offsetLeft","left","width","setStyle","name","extraData","instance","id","modal","event","CustomEvent","detail","window","dispatchEvent","defineProperty","get","isPlatformBrowser","enumerable","configurable","forEach","viewContainerRef","clear","createComponent","decorators","type","Component","args","selector","template","ctorParameters","Renderer2","ChangeDetectorRef","ComponentFactoryResolver","Inject","DOCUMENT","PLATFORM_ID","propDecorators","Input","Output","ViewChildren","read","ViewContainerRef","HostListener","NgxSmartModalStackService","_modalStack","addModal","modalInstance","i","findIndex","o","push","getModal","find","getModalStack","getOpenedModals","filter","getTopOpenedModal","map","reduce","highest","item","getHigherIndex","Math","max","apply","concat","getModalStackCount","removeModal","splice","Injectable","NgxSmartModalService","_componentFactoryResolver","_appRef","_injector","applicationRef","_escapeKeyboardEvent","key","closeLatestModal","_trapFocusModal","document","activeElement","preventDefault","stopPropagation","focus","_addEvents","_openModal","_closeModal","closeAll","_toggleModal","setModalData","getModalData","resetModalData","removed","create","options","componentFactory","ngContent","_resolveNgContent","modalNodes","_getModalNodes","componentRef","Type","attachView","hostView","domElem","rootNodes","appendChild","addEventListener","_initModal","_deleteModal","_dismissModal","lastElementFocused","setTimeout","setAttribute","removeEventListener","removeAttribute","createTextNode","TemplateRef","viewRef","createEmbeddedView","ApplicationRef","Injector","NgxSmartModalModule","serivce","forRoot","ngModule","providers","forChild","NgModule","declarations","entryComponents","imports","CommonModule","Éµa","value"],"mappings":"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","file":"ngx-smart-modal.umd.min.js.map","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.ngxSmartModal = {}),global.ng.core,global.ng.common));\n}(this, (function (exports,core,common) { 'use strict';\n\n/**\n * @license ngx-smart-modal\n * MIT license\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalConfig = {\n    bodyClassOpen: 'dialog-open',\n    prefixEvent: 'ngx-smart-modal.'\n};\n/**\n * @record\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalComponent = (function () {\n    function NgxSmartModalComponent(_renderer, _changeDetectorRef, componentFactoryResolver, _document, _platformId) {\n        this._renderer = _renderer;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this._document = _document;\n        this._platformId = _platformId;\n        this.closable = true;\n        this.escapable = true;\n        this.dismissable = true;\n        this.identifier = '';\n        this.customClass = 'nsm-dialog-animation-fade';\n        this.visible = false;\n        this.backdrop = true;\n        this.force = true;\n        this.hideDelay = 500;\n        this.autostart = false;\n        this.target = '';\n        this.ariaLabel = null;\n        this.ariaLabelledBy = null;\n        this.ariaDescribedBy = null;\n        this.visibleChange = new core.EventEmitter();\n        this.onClose = new core.EventEmitter();\n        this.onCloseFinished = new core.EventEmitter();\n        this.onDismiss = new core.EventEmitter();\n        this.onDismissFinished = new core.EventEmitter();\n        this.onAnyCloseEvent = new core.EventEmitter();\n        this.onAnyCloseEventFinished = new core.EventEmitter();\n        this.onOpen = new core.EventEmitter();\n        this.onOpenFinished = new core.EventEmitter();\n        this.onEscape = new core.EventEmitter();\n        this.onDataAdded = new core.EventEmitter();\n        this.onDataRemoved = new core.EventEmitter();\n        this.layerPosition = 1041;\n        this.overlayVisible = false;\n        this.openedClass = false;\n        this.createFrom = 'html';\n    }\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        if (!this.identifier || !this.identifier.length) {\n            throw new Error('identifier field isnât set. Please set one before calling <ngx-smart-modal> in a template.');\n        }\n        this._sendEvent('create');\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngAfterViewInit = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (this.contentComponent) {\n            var /** @type {?} */ factory_1 = this.componentFactoryResolver.resolveComponentFactory(this.contentComponent);\n            this.createDynamicContent(this.dynamicContentContainer, factory_1);\n            this.dynamicContentContainer.changes.subscribe(function (contentViewContainers) {\n                _this.createDynamicContent(contentViewContainers, factory_1);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        this._sendEvent('delete');\n    };\n    /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.open = /**\n     * Open the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('open', { top: top });\n        return this;\n    };\n    /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.close = /**\n     * Close the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._sendEvent('close');\n        return this;\n    };\n    /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.dismiss = /**\n     * Dismiss the modal instance\n     *\n     * @param {?} e the event sent by the browser\n     * @return {?} the modal component\n     */\n    function (e) {\n        if (!this.dismissable || !e.target.classList.contains('overlay')) {\n            return this;\n        }\n        this._sendEvent('dismiss');\n        return this;\n    };\n    /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.toggle = /**\n     * Toggle visibility of the modal instance\n     *\n     * @param {?=} top open the modal top of all other\n     * @return {?} the modal component\n     */\n    function (top) {\n        this._sendEvent('toggle', { top: top });\n        return this;\n    };\n    /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addCustomClass = /**\n     * Add a custom class to the modal instance\n     *\n     * @param {?} className the class to add\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (!this.customClass.length) {\n            this.customClass = className;\n        }\n        else {\n            this.customClass += ' ' + className;\n        }\n        return this;\n    };\n    /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeCustomClass = /**\n     * Remove a custom class to the modal instance\n     *\n     * @param {?=} className the class to remove\n     * @return {?} the modal component\n     */\n    function (className) {\n        if (className) {\n            this.customClass = this.customClass.replace(className, '').trim();\n        }\n        else {\n            this.customClass = '';\n        }\n        return this;\n    };\n    /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.isVisible = /**\n     * Returns the visibility state of the modal instance\n     * @return {?}\n     */\n    function () {\n        return this.visible;\n    };\n    /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.hasData = /**\n     * Checks if data is attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data !== undefined;\n    };\n    /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.setData = /**\n     * Attach data to the modal instance\n     *\n     * @param {?} data the data to attach\n     * @param {?=} force override potentially attached data\n     * @return {?} the modal component\n     */\n    function (data, force) {\n        if (!this.hasData() || (this.hasData() && force)) {\n            this._data = data;\n            this.onDataAdded.emit(this._data);\n            this.markForCheck();\n        }\n        console.log('Content', this.content);\n        if (this.content instanceof core.EmbeddedViewRef) {\n            console.log('Is embedded view ref', this._data);\n            Object.assign((/** @type {?} */ (this.content)).context, this._data);\n        }\n        return this;\n    };\n    /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.getData = /**\n     * Retrieve the data attached to the modal instance\n     * @return {?}\n     */\n    function () {\n        return this._data;\n    };\n    /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeData = /**\n     * Remove the data attached to the modal instance\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._data = undefined;\n        this.onDataRemoved.emit(true);\n        this.markForCheck();\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.addBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.addClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    NgxSmartModalComponent.prototype.removeBodyClass = /**\n     * Add body class modal opened\n     *\n     * @return {?} the modal component\n     */\n    function () {\n        this._renderer.removeClass(this._document.body, NgxSmartModalConfig.bodyClassOpen);\n        return this;\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.markForCheck = /**\n     * @return {?}\n     */\n    function () {\n        try {\n            this._changeDetectorRef.detectChanges();\n        }\n        catch (/** @type {?} */ e) {\n        }\n        this._changeDetectorRef.markForCheck();\n    };\n    /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.targetPlacement = /**\n     * Listens for window resize event and recalculates modal instance position if it is element-relative\n     * @return {?}\n     */\n    function () {\n        if (!this.isBrowser || !this.nsmDialog.length || !this.nsmContent.length || !this.nsmOverlay.length || !this.target) {\n            return false;\n        }\n        var /** @type {?} */ targetElement = this._document.querySelector(this.target);\n        if (!targetElement) {\n            return false;\n        }\n        var /** @type {?} */ targetElementRect = targetElement.getBoundingClientRect();\n        var /** @type {?} */ bodyRect = this.nsmOverlay.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmContentRect = this.nsmContent.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ nsmDialogRect = this.nsmDialog.first.nativeElement.getBoundingClientRect();\n        var /** @type {?} */ marginLeft = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginLeft), 10);\n        var /** @type {?} */ marginTop = parseInt(/** @type {?} */ (getComputedStyle(this.nsmContent.first.nativeElement).marginTop), 10);\n        var /** @type {?} */ offsetTop = targetElementRect.top - nsmDialogRect.top - ((nsmContentRect.height - targetElementRect.height) / 2);\n        var /** @type {?} */ offsetLeft = targetElementRect.left - nsmDialogRect.left - ((nsmContentRect.width - targetElementRect.width) / 2);\n        if (offsetLeft + nsmDialogRect.left + nsmContentRect.width + (marginLeft * 2) > bodyRect.width) {\n            offsetLeft = bodyRect.width - (nsmDialogRect.left + nsmContentRect.width) - (marginLeft * 2);\n        }\n        else if (offsetLeft + nsmDialogRect.left < 0) {\n            offsetLeft = -nsmDialogRect.left;\n        }\n        if (offsetTop + nsmDialogRect.top + nsmContentRect.height + marginTop > bodyRect.height) {\n            offsetTop = bodyRect.height - (nsmDialogRect.top + nsmContentRect.height) - marginTop;\n        }\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'top', (offsetTop < 0 ? 0 : offsetTop) + 'px');\n        this._renderer.setStyle(this.nsmContent.first.nativeElement, 'left', offsetLeft + 'px');\n    };\n    /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype._sendEvent = /**\n     * @param {?} name\n     * @param {?=} extraData\n     * @return {?}\n     */\n    function (name, extraData) {\n        if (!this.isBrowser) {\n            return false;\n        }\n        var /** @type {?} */ data = {\n            extraData: extraData,\n            instance: { id: this.identifier, modal: this }\n        };\n        var /** @type {?} */ event = new CustomEvent(NgxSmartModalConfig.prefixEvent + name, { detail: data });\n        return window.dispatchEvent(event);\n    };\n    Object.defineProperty(NgxSmartModalComponent.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates content inside provided ViewContainerRef\n     * @param {?} changes\n     * @param {?} factory\n     * @return {?}\n     */\n    NgxSmartModalComponent.prototype.createDynamicContent = /**\n     * Creates content inside provided ViewContainerRef\n     * @param {?} changes\n     * @param {?} factory\n     * @return {?}\n     */\n    function (changes, factory) {\n        var _this = this;\n        changes.forEach(function (viewContainerRef) {\n            viewContainerRef.clear();\n            viewContainerRef.createComponent(factory);\n            _this.markForCheck();\n        });\n    };\n    NgxSmartModalComponent.decorators = [\n        { type: core.Component, args: [{\n                    selector: 'ngx-smart-modal',\n                    template: \"\\n    <div *ngIf=\\\"overlayVisible\\\"\\n         [style.z-index]=\\\"visible ? layerPosition-1 : -1\\\"\\n         [ngClass]=\\\"{'transparent':!backdrop, 'overlay':true, 'nsm-overlay-open':openedClass}\\\"\\n         (mousedown)=\\\"dismiss($event)\\\" #nsmOverlay>\\n      <div [style.z-index]=\\\"visible ? layerPosition : -1\\\"\\n           [ngClass]=\\\"['nsm-dialog', customClass, openedClass ? 'nsm-dialog-open': 'nsm-dialog-close']\\\" #nsmDialog\\n           [attr.aria-hidden]=\\\"openedClass ? false : true\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledBy\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedBy\\\">\\n        <div class=\\\"nsm-content\\\" #nsmContent>\\n          <div class=\\\"nsm-body\\\">\\n            <ng-template #dynamicContent></ng-template>\\n            <ng-content></ng-content>\\n\\n          </div>\\n          <button type=\\\"button\\\" *ngIf=\\\"closable\\\" (click)=\\\"close()\\\" aria-label=\\\"Close\\\" class=\\\"nsm-dialog-btn-close\\\">\\n            <svg xmlns=\\\"http://www.w3.org/2000/svg\\\" version=\\\"1.1\\\" id=\\\"Layer_1\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 512 512\\\"\\n                 xml:space=\\\"preserve\\\" width=\\\"16px\\\" height=\\\"16px\\\">\\n              <g>\\n                <path d=\\\"M505.943,6.058c-8.077-8.077-21.172-8.077-29.249,0L6.058,476.693c-8.077,8.077-8.077,21.172,0,29.249    C10.096,509.982,15.39,512,20.683,512c5.293,0,10.586-2.019,14.625-6.059L505.943,35.306    C514.019,27.23,514.019,14.135,505.943,6.058z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n              <g>\\n                <path d=\\\"M505.942,476.694L35.306,6.059c-8.076-8.077-21.172-8.077-29.248,0c-8.077,8.076-8.077,21.171,0,29.248l470.636,470.636    c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.587-2.019,14.624-6.057C514.018,497.866,514.018,484.771,505.942,476.694z\\\"\\n                      fill=\\\"currentColor\\\"/>\\n              </g>\\n            </svg>\\n          </button>\\n        </div>\\n      </div>\\n    </div>\\n  \"\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalComponent.ctorParameters = function () { return [\n        { type: core.Renderer2, },\n        { type: core.ChangeDetectorRef, },\n        { type: core.ComponentFactoryResolver, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    NgxSmartModalComponent.propDecorators = {\n        \"closable\": [{ type: core.Input },],\n        \"escapable\": [{ type: core.Input },],\n        \"dismissable\": [{ type: core.Input },],\n        \"identifier\": [{ type: core.Input },],\n        \"customClass\": [{ type: core.Input },],\n        \"visible\": [{ type: core.Input },],\n        \"backdrop\": [{ type: core.Input },],\n        \"force\": [{ type: core.Input },],\n        \"hideDelay\": [{ type: core.Input },],\n        \"autostart\": [{ type: core.Input },],\n        \"target\": [{ type: core.Input },],\n        \"ariaLabel\": [{ type: core.Input },],\n        \"ariaLabelledBy\": [{ type: core.Input },],\n        \"ariaDescribedBy\": [{ type: core.Input },],\n        \"content\": [{ type: core.Input },],\n        \"visibleChange\": [{ type: core.Output },],\n        \"onClose\": [{ type: core.Output },],\n        \"onCloseFinished\": [{ type: core.Output },],\n        \"onDismiss\": [{ type: core.Output },],\n        \"onDismissFinished\": [{ type: core.Output },],\n        \"onAnyCloseEvent\": [{ type: core.Output },],\n        \"onAnyCloseEventFinished\": [{ type: core.Output },],\n        \"onOpen\": [{ type: core.Output },],\n        \"onOpenFinished\": [{ type: core.Output },],\n        \"onEscape\": [{ type: core.Output },],\n        \"onDataAdded\": [{ type: core.Output },],\n        \"onDataRemoved\": [{ type: core.Output },],\n        \"nsmDialog\": [{ type: core.ViewChildren, args: ['nsmDialog',] },],\n        \"dynamicContentContainer\": [{ type: core.ViewChildren, args: ['dynamicContent', { read: core.ViewContainerRef },] },],\n        \"nsmContent\": [{ type: core.ViewChildren, args: ['nsmContent',] },],\n        \"nsmOverlay\": [{ type: core.ViewChildren, args: ['nsmOverlay',] },],\n        \"targetPlacement\": [{ type: core.HostListener, args: ['window:resize',] },],\n    };\n    return NgxSmartModalComponent;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalStackService = (function () {\n    function NgxSmartModalStackService() {\n        this._modalStack = [];\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalStackService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        if (force) {\n            var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === modalInstance.id; });\n            if (i > -1) {\n                this._modalStack[i].modal = modalInstance.modal;\n            }\n            else {\n                this._modalStack.push(modalInstance);\n            }\n            return;\n        }\n        this._modalStack.push(modalInstance);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalStackService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.find(function (o) { return o.id === id; });\n        if (i !== undefined) {\n            return i.modal;\n        }\n        else {\n            throw new Error(\"Cannot find modal with identifier \" + id);\n        }\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack;\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalStackService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.filter(function (o) { return o.modal.visible; });\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalStackService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        if (!this.getOpenedModals().length) {\n            throw new Error('No modal is opened');\n        }\n        return this.getOpenedModals()\n            .map(function (o) { return o.modal; })\n            .reduce(function (highest, item) { return item.layerPosition > highest.layerPosition ? item : highest; }, this.getOpenedModals()[0].modal);\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalStackService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return Math.max.apply(Math, this._modalStack.map(function (o) { return o.modal.layerPosition; }).concat([1041])) + 1;\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalStackService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.length;\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalStackService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        var /** @type {?} */ i = this._modalStack.findIndex(function (o) { return o.id === id; });\n        if (i > -1) {\n            this._modalStack.splice(i, 1);\n        }\n    };\n    NgxSmartModalStackService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalStackService.ctorParameters = function () { return []; };\n    return NgxSmartModalStackService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalService = (function () {\n    function NgxSmartModalService(_componentFactoryResolver, _appRef, _injector, _modalStack, applicationRef, _document, \n        // Do not use the `Document` interface, which cause problem with AoT compilation.\n        _platformId) {\n        var _this = this;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._modalStack = _modalStack;\n        this.applicationRef = applicationRef;\n        this._document = _document;\n        this._platformId = _platformId;\n        /**\n         * Close the latest opened modal if escape key event is emitted\n         * @param event The Keyboard Event\n         */\n        this._escapeKeyboardEvent = function (event) {\n            if (event.key === 'Escape') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.escapable) {\n                        return false;\n                    }\n                    modal.onEscape.emit(modal);\n                    _this.closeLatestModal();\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        /**\n         * While modal is open, the focus stay on it\n         * @param event The Keyboar dEvent\n         */\n        this._trapFocusModal = function (event) {\n            if (event.key === 'Tab') {\n                try {\n                    var /** @type {?} */ modal = _this.getTopOpenedModal();\n                    if (!modal.nsmDialog.first.nativeElement.contains(document.activeElement)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                        modal.nsmDialog.first.nativeElement.focus();\n                    }\n                    return true;\n                }\n                catch (/** @type {?} */ e) {\n                    return false;\n                }\n            }\n            return false;\n        };\n        this._addEvents();\n    }\n    /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    NgxSmartModalService.prototype.addModal = /**\n     * Add a new modal instance. This step is essential and allows to retrieve any modal at any time.\n     * It stores an object that contains the given modal identifier and the modal itself directly in the `modalStack`.\n     *\n     * @param {?} modalInstance The object that contains the given modal identifier and the modal itself.\n     * @param {?=} force Optional parameter that forces the overriding of modal instance if it already exists.\n     * @return {?} nothing special.\n     */\n    function (modalInstance, force) {\n        this._modalStack.addModal(modalInstance, force);\n    };\n    /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.getModal = /**\n     * Retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._modalStack.getModal(id);\n    };\n    /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.get = /**\n     * Alias of `getModal` to retrieve a modal instance by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this.getModal(id);\n    };\n    /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.open = /**\n     * Open a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._openModal(this.get(id), force);\n    };\n    /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.close = /**\n     * Close a given modal\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?}\n     */\n    function (id) {\n        return this._closeModal(this.get(id));\n    };\n    /**\n     * Close all opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeAll = /**\n     * Close all opened modals\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        this.getOpenedModals().forEach(function (instance) {\n            _this._closeModal(instance.modal);\n        });\n    };\n    /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.toggle = /**\n     * Toggles a given modal\n     * If the retrieved modal is opened it closes it, else it opens it.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?=} force Tell the modal to open top of all other opened modals\n     * @return {?}\n     */\n    function (id, force) {\n        if (force === void 0) { force = false; }\n        return this._toggleModal(this.get(id), force);\n    };\n    /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStack = /**\n     * Retrieve all the created modals.\n     *\n     * @return {?} an array that contains all modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStack();\n    };\n    /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    NgxSmartModalService.prototype.getOpenedModals = /**\n     * Retrieve all the opened modals. It looks for all modal instances with their `visible` property set to `true`.\n     *\n     * @return {?} an array that contains all the opened modals.\n     */\n    function () {\n        return this._modalStack.getOpenedModals();\n    };\n    /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    NgxSmartModalService.prototype.getTopOpenedModal = /**\n     * Retrieve the opened modal with highest z-index.\n     *\n     * @return {?} the opened modal with highest z-index.\n     */\n    function () {\n        return this._modalStack.getTopOpenedModal();\n    };\n    /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    NgxSmartModalService.prototype.getHigherIndex = /**\n     * Get the higher `z-index` value between all the modal instances. It iterates over the `ModalStack` array and\n     * calculates a higher value (it takes the highest index value between all the modal instances and adds 1).\n     * Use it to make a modal appear foreground.\n     *\n     * @return {?} a higher index from all the existing modal instances.\n     */\n    function () {\n        return this._modalStack.getHigherIndex();\n    };\n    /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    NgxSmartModalService.prototype.getModalStackCount = /**\n     * It gives the number of modal instances. It's helpful to know if the modal stack is empty or not.\n     *\n     * @return {?} the number of modal instances.\n     */\n    function () {\n        return this._modalStack.getModalStackCount();\n    };\n    /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    NgxSmartModalService.prototype.removeModal = /**\n     * Remove a modal instance from the modal stack.\n     *\n     * @param {?} id The modal identifier.\n     * @return {?} the removed modal instance.\n     */\n    function (id) {\n        this._modalStack.removeModal(id);\n    };\n    /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    NgxSmartModalService.prototype.setModalData = /**\n     * Associate data to an identified modal. If the modal isn't already associated to some data, it creates a new\n     * entry in the `modalData` array with its `id` and the given `data`. If the modal already has data, it rewrites\n     * them with the new ones. Finally if no modal found it returns an error message in the console and false value\n     * as method output.\n     *\n     * @param {?} data The data you want to associate to the modal.\n     * @param {?} id The modal identifier.\n     * @param {?=} force If true, overrides the previous stored data if there was.\n     * @return {?} true if the given modal exists and the process has been tried, either false.\n     */\n    function (data, id, force) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            i.setData(data, force);\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    NgxSmartModalService.prototype.getModalData = /**\n     * Retrieve modal data by its identifier.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the associated modal data.\n     */\n    function (id) {\n        var /** @type {?} */ i;\n        if (i = this.get(id)) {\n            return i.getData();\n        }\n        return null;\n    };\n    /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    NgxSmartModalService.prototype.resetModalData = /**\n     * Reset the data attached to a given modal.\n     *\n     * @param {?} id The modal identifier used at creation time.\n     * @return {?} the removed data or false if modal doesn't exist.\n     */\n    function (id) {\n        if (!!this._modalStack.getModalStack().find(function (o) { return o.id === id; })) {\n            var /** @type {?} */ removed = this.getModal(id).getData();\n            this.getModal(id).removeData();\n            return removed;\n        }\n        else {\n            return false;\n        }\n    };\n    /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.closeLatestModal = /**\n     * Close the latest opened modal if it has been declared as escapable\n     * Using a debounce system because one or more modals could be listening\n     * escape key press event.\n     * @return {?}\n     */\n    function () {\n        this.getTopOpenedModal().close();\n    };\n    /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    NgxSmartModalService.prototype.create = /**\n     * Create dynamic NgxSmartModalComponent\n     * @template T\n     * @param {?} id The modal identifier used at creation time.\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @param {?=} options\n     * @return {?}\n     */\n    function (id, content, options) {\n        if (options === void 0) { options = {}; }\n        try {\n            return this.getModal(id);\n        }\n        catch (/** @type {?} */ e) {\n            var /** @type {?} */ componentFactory = this._componentFactoryResolver.resolveComponentFactory(NgxSmartModalComponent);\n            var /** @type {?} */ ngContent = this._resolveNgContent(content);\n            var /** @type {?} */ modalNodes = this._getModalNodes(ngContent);\n            console.log('Create', { ngContent: ngContent, modalNodes: modalNodes });\n            var /** @type {?} */ componentRef = componentFactory.create(this._injector, modalNodes);\n            if (content instanceof core.Type) {\n                componentRef.instance.contentComponent = content;\n            }\n            componentRef.instance.content = ngContent;\n            componentRef.instance.identifier = id;\n            componentRef.instance.createFrom = 'service';\n            if (typeof options.closable === 'boolean') {\n                componentRef.instance.closable = options.closable;\n            }\n            if (typeof options.escapable === 'boolean') {\n                componentRef.instance.escapable = options.escapable;\n            }\n            if (typeof options.dismissable === 'boolean') {\n                componentRef.instance.dismissable = options.dismissable;\n            }\n            if (typeof options.customClass === 'string') {\n                componentRef.instance.customClass = options.customClass;\n            }\n            if (typeof options.backdrop === 'boolean') {\n                componentRef.instance.backdrop = options.backdrop;\n            }\n            if (typeof options.force === 'boolean') {\n                componentRef.instance.force = options.force;\n            }\n            if (typeof options.hideDelay === 'number') {\n                componentRef.instance.hideDelay = options.hideDelay;\n            }\n            if (typeof options.autostart === 'boolean') {\n                componentRef.instance.autostart = options.autostart;\n            }\n            if (typeof options.target === 'string') {\n                componentRef.instance.target = options.target;\n            }\n            if (typeof options.ariaLabel === 'string') {\n                componentRef.instance.ariaLabel = options.ariaLabel;\n            }\n            if (typeof options.ariaLabelledBy === 'string') {\n                componentRef.instance.ariaLabelledBy = options.ariaLabelledBy;\n            }\n            if (typeof options.ariaDescribedBy === 'string') {\n                componentRef.instance.ariaDescribedBy = options.ariaDescribedBy;\n            }\n            this._appRef.attachView(componentRef.hostView);\n            var /** @type {?} */ domElem = /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);\n            this._document.body.appendChild(domElem);\n            return componentRef.instance;\n        }\n    };\n    /**\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._addEvents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        if (!this.isBrowser) {\n            return false;\n        }\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'create', /** @type {?} */ ((function (e) {\n            _this._initModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'delete', /** @type {?} */ ((function (e) {\n            _this._deleteModal(e.detail.instance);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'open', /** @type {?} */ ((function (e) {\n            _this._openModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'toggle', /** @type {?} */ ((function (e) {\n            _this._toggleModal(e.detail.instance.modal, e.detail.top);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'close', /** @type {?} */ ((function (e) {\n            _this._closeModal(e.detail.instance.modal);\n        })));\n        window.addEventListener(NgxSmartModalConfig.prefixEvent + 'dismiss', /** @type {?} */ ((function (e) {\n            _this._dismissModal(e.detail.instance.modal);\n        })));\n        window.addEventListener('keyup', this._escapeKeyboardEvent);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._initModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        modalInstance.modal.layerPosition += this.getModalStackCount();\n        this.addModal(modalInstance, modalInstance.modal.force);\n        if (modalInstance.modal.autostart) {\n            this.open(modalInstance.id);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._openModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return false;\n        }\n        this.lastElementFocused = document.activeElement;\n        if (modal.escapable) {\n            window.addEventListener('keyup', this._escapeKeyboardEvent);\n        }\n        if (modal.backdrop) {\n            window.addEventListener('keydown', this._trapFocusModal);\n        }\n        if (top) {\n            modal.layerPosition = this.getHigherIndex();\n        }\n        modal.addBodyClass();\n        modal.overlayVisible = true;\n        modal.visible = true;\n        modal.onOpen.emit(modal);\n        modal.markForCheck();\n        setTimeout(function () {\n            modal.openedClass = true;\n            if (modal.target) {\n                modal.targetPlacement();\n            }\n            modal.nsmDialog.first.nativeElement.setAttribute('role', 'dialog');\n            modal.nsmDialog.first.nativeElement.setAttribute('tabIndex', '-1');\n            modal.nsmDialog.first.nativeElement.setAttribute('aria-modal', 'true');\n            modal.nsmDialog.first.nativeElement.focus();\n            modal.markForCheck();\n            modal.onOpenFinished.emit(modal);\n        });\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._toggleModal = /**\n     * @param {?} modal\n     * @param {?=} top\n     * @return {?}\n     */\n    function (modal, top) {\n        if (modal.visible) {\n            return this._closeModal(modal);\n        }\n        else {\n            return this._openModal(modal, top);\n        }\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._closeModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        var _this = this;\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onClose.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n            window.removeEventListener('keyup', this._escapeKeyboardEvent);\n            window.removeEventListener('keydown', this._trapFocusModal);\n        }\n        setTimeout(function () {\n            modal.visibleChange.emit(modal.visible);\n            modal.visible = false;\n            modal.overlayVisible = false;\n            modal.nsmDialog.first.nativeElement.removeAttribute('tabIndex');\n            modal.markForCheck();\n            modal.onCloseFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n            _this.lastElementFocused.focus();\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modal\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._dismissModal = /**\n     * @param {?} modal\n     * @return {?}\n     */\n    function (modal) {\n        if (!modal.openedClass) {\n            return false;\n        }\n        modal.openedClass = false;\n        modal.onDismiss.emit(modal);\n        modal.onAnyCloseEvent.emit(modal);\n        if (this.getOpenedModals().length < 2) {\n            modal.removeBodyClass();\n        }\n        setTimeout(function () {\n            modal.visible = false;\n            modal.visibleChange.emit(modal.visible);\n            modal.overlayVisible = false;\n            modal.markForCheck();\n            modal.onDismissFinished.emit(modal);\n            modal.onAnyCloseEventFinished.emit(modal);\n        }, modal.hideDelay);\n        return true;\n    };\n    /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._deleteModal = /**\n     * @param {?} modalInstance\n     * @return {?}\n     */\n    function (modalInstance) {\n        this.removeModal(modalInstance.id);\n        if (!this.getModalStack().length) {\n            modalInstance.modal.removeBodyClass();\n        }\n    };\n    /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._resolveNgContent = /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    function (content) {\n        if (typeof content === 'string') {\n            var /** @type {?} */ element = this._document.createTextNode(content);\n            return element;\n        }\n        else if (content instanceof core.TemplateRef) {\n            var /** @type {?} */ viewRef = content.createEmbeddedView(/** @type {?} */ (null));\n            this.applicationRef.attachView(viewRef);\n            return viewRef;\n        }\n        else {\n            return content;\n        }\n    };\n    /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    NgxSmartModalService.prototype._getModalNodes = /**\n     * Resolve content according to the types\n     * @template T\n     * @param {?} content The modal content ( string, templateRef or Component )\n     * @return {?}\n     */\n    function (content) {\n        if (content instanceof core.Type) {\n            return [];\n        }\n        else if (content instanceof core.EmbeddedViewRef) {\n            return [content.rootNodes];\n        }\n        else {\n            return [[content]];\n        }\n    };\n    Object.defineProperty(NgxSmartModalService.prototype, \"isBrowser\", {\n        get: /**\n         * Is current platform browser\n         * @return {?}\n         */\n        function () {\n            return common.isPlatformBrowser(this._platformId);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgxSmartModalService.decorators = [\n        { type: core.Injectable },\n    ];\n    /** @nocollapse */\n    NgxSmartModalService.ctorParameters = function () { return [\n        { type: core.ComponentFactoryResolver, },\n        { type: core.ApplicationRef, },\n        { type: core.Injector, },\n        { type: NgxSmartModalStackService, },\n        { type: core.ApplicationRef, },\n        { type: undefined, decorators: [{ type: core.Inject, args: [common.DOCUMENT,] },] },\n        { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] },] },\n    ]; };\n    return NgxSmartModalService;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar NgxSmartModalModule = (function () {\n    function NgxSmartModalModule(serivce) {\n        this.serivce = serivce;\n    }\n    /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forRoot = /**\n     * Use in AppModule: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    NgxSmartModalModule.forChild = /**\n     * Use in features modules with lazy loading: new instance of NgxSmartModal.\n     * @return {?}\n     */\n    function () {\n        return {\n            ngModule: NgxSmartModalModule,\n            providers: [\n                NgxSmartModalService,\n                NgxSmartModalStackService\n            ]\n        };\n    };\n    NgxSmartModalModule.decorators = [\n        { type: core.NgModule, args: [{\n                    declarations: [NgxSmartModalComponent],\n                    entryComponents: [NgxSmartModalComponent],\n                    exports: [NgxSmartModalComponent],\n                    imports: [common.CommonModule]\n                },] },\n    ];\n    /** @nocollapse */\n    NgxSmartModalModule.ctorParameters = function () { return [\n        { type: NgxSmartModalService, },\n    ]; };\n    return NgxSmartModalModule;\n}());\n\nexports.NgxSmartModalService = NgxSmartModalService;\nexports.NgxSmartModalComponent = NgxSmartModalComponent;\nexports.NgxSmartModalModule = NgxSmartModalModule;\nexports.NgxSmartModalConfig = NgxSmartModalConfig;\nexports.Éµa = NgxSmartModalStackService;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=ngx-smart-modal.umd.js.map\n"]}